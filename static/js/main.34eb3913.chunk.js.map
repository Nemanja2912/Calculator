{"version":3,"sources":["components/button.js","components/body.js","components/screen.js","App.js","serviceWorker.js","index.js"],"names":["Button","props","state","onClick","this","func","className","span","btn","Component","Body","print","n","setState","currentNum","calculus","add","memoryNum","console","log","Number","operation","Screen","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"+LAoBeA,E,kDAjBb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,GAFI,E,qDAMjB,OACE,uBACEC,QAASC,KAAKH,MAAMI,KACpBC,UAA+B,MAApBF,KAAKH,MAAMM,KAAe,YAAc,OAElDH,KAAKH,MAAMO,S,GAZCC,aC4DNC,E,kDA1Db,WAAYT,GAAQ,IAAD,8BACjB,cAAMA,IASRU,MAAQ,SAACC,GACP,EAAKC,SAAS,CACZC,WAAY,EAAKZ,MAAMY,WAAaF,EACpCG,SAAU,EAAKb,MAAMa,SAAWH,KAbjB,EAiBnBI,IAAM,WACJ,EAAKH,SAAS,CACZC,WAAY,GACZG,UAAW,EAAKf,MAAMY,WACtBC,SAAU,EAAKb,MAAMa,SAAW,QAElCG,QAAQC,IAAIC,OAAO,EAAKlB,MAAMY,YAAcM,OAAO,EAAKlB,MAAMe,aArB9D,EAAKf,MAAQ,CACXY,WAAY,GACZG,UAAW,EACXI,WAAW,EACXN,SAAU,IANK,E,iEA2BjBG,QAAQC,IAAIf,KAAKF,MAAMY,YACvBI,QAAQC,IAAIf,KAAKF,MAAMa,Y,+BAGf,IAAD,OACP,OACE,yBAAKT,UAAU,aACb,kBAAC,EAAD,CAAQE,IAAI,OACZ,kBAAC,EAAD,CAAQA,IAAI,QACZ,kBAAC,EAAD,CAAQA,IAAI,MACZ,kBAAC,EAAD,CAAQA,IAAI,MACZ,kBAAC,EAAD,CAAQH,KAAM,kBAAM,EAAKM,MAAM,IAAIH,IAAI,MACvC,kBAAC,EAAD,CAAQH,KAAM,kBAAM,EAAKM,MAAM,IAAIH,IAAI,MACvC,kBAAC,EAAD,CAAQH,KAAM,kBAAM,EAAKM,MAAM,IAAIH,IAAI,MACvC,kBAAC,EAAD,CAAQA,IAAI,MACZ,kBAAC,EAAD,CAAQH,KAAM,kBAAM,EAAKM,MAAM,IAAIH,IAAI,MACvC,kBAAC,EAAD,CAAQH,KAAM,kBAAM,EAAKM,MAAM,IAAIH,IAAI,MACvC,kBAAC,EAAD,CAAQH,KAAM,kBAAM,EAAKM,MAAM,IAAIH,IAAI,MACvC,kBAAC,EAAD,CAAQA,IAAI,MACZ,kBAAC,EAAD,CAAQH,KAAM,kBAAM,EAAKM,MAAM,IAAIH,IAAI,MACvC,kBAAC,EAAD,CAAQH,KAAM,kBAAM,EAAKM,MAAM,IAAIH,IAAI,MACvC,kBAAC,EAAD,CAAQH,KAAM,kBAAM,EAAKM,MAAM,IAAIH,IAAI,MACvC,kBAAC,EAAD,CAAQH,KAAMD,KAAKY,IAAKR,IAAI,MAC5B,kBAAC,EAAD,CAAQH,KAAM,kBAAM,EAAKM,MAAM,IAAIJ,KAAK,IAAIC,IAAI,MAChD,kBAAC,EAAD,CAAQA,IAAI,MACZ,kBAAC,EAAD,CAAQA,IAAI,W,GArDDC,aCSJa,E,kDATb,WAAYrB,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,GAFI,E,qDAKjB,OAAO,yBAAKI,UAAU,UAAf,U,GANUG,aCWNc,MATf,WACE,OACE,yBAAKjB,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,QCIckB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvB,QAAQuB,MAAMA,EAAMC,a","file":"static/js/main.34eb3913.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass Button extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <p\r\n        onClick={this.props.func}\r\n        className={this.props.span === \"2\" ? \"btn span2\" : \"btn\"}\r\n      >\r\n        {this.props.btn}\r\n      </p>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Button;\r\n","import React, { Component } from \"react\";\r\nimport Button from \"./button\";\r\n\r\nclass Body extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      currentNum: \"\",\r\n      memoryNum: 0,\r\n      operation: false,\r\n      calculus: \"\",\r\n    };\r\n  }\r\n\r\n  print = (n) => {\r\n    this.setState({\r\n      currentNum: this.state.currentNum + n,\r\n      calculus: this.state.calculus + n,\r\n    });\r\n  };\r\n\r\n  add = () => {\r\n    this.setState({\r\n      currentNum: \"\",\r\n      memoryNum: this.state.currentNum,\r\n      calculus: this.state.calculus + \" + \",\r\n    });\r\n    console.log(Number(this.state.currentNum) + Number(this.state.memoryNum));\r\n  };\r\n\r\n  componentDidUpdate() {\r\n    console.log(this.state.currentNum);\r\n    console.log(this.state.calculus);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"calc-body\">\r\n        <Button btn=\"AC\" />\r\n        <Button btn=\"+/-\" />\r\n        <Button btn=\"%\" />\r\n        <Button btn=\"/\" />\r\n        <Button func={() => this.print(7)} btn=\"7\" />\r\n        <Button func={() => this.print(8)} btn=\"8\" />\r\n        <Button func={() => this.print(9)} btn=\"9\" />\r\n        <Button btn=\"*\" />\r\n        <Button func={() => this.print(4)} btn=\"4\" />\r\n        <Button func={() => this.print(5)} btn=\"5\" />\r\n        <Button func={() => this.print(6)} btn=\"6\" />\r\n        <Button btn=\"-\" />\r\n        <Button func={() => this.print(1)} btn=\"1\" />\r\n        <Button func={() => this.print(2)} btn=\"2\" />\r\n        <Button func={() => this.print(3)} btn=\"3\" />\r\n        <Button func={this.add} btn=\"+\" />\r\n        <Button func={() => this.print(0)} span=\"2\" btn=\"0\" />\r\n        <Button btn=\".\" />\r\n        <Button btn=\"=\" />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Body;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Screen extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n  render() {\r\n    return <div className=\"screen\">55</div>;\r\n  }\r\n}\r\n\r\nexport default Screen;\r\n","import React from \"react\";\nimport Body from \"./components/body\";\nimport Screen from \"./components/screen\";\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Screen />\n      <Body />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./style.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}