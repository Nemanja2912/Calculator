{"version":3,"sources":["components/button.js","components/body.js","components/screen.js","App.js","serviceWorker.js","index.js"],"names":["Button","props","state","onClick","this","func","className","span","btn","Component","Body","print","n","setState","currentNum","calculus","operation","operationStatus","primaryCalculus","sendData","operations","sign","slice","memory","eval","add","substraction","multiplication","division","val1","val2","getData","reset","Screen","preview","display","App","data","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2c07d1c3.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass Button extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <p\r\n        onClick={this.props.func}\r\n        className={this.props.span === \"2\" ? \"btn span2\" : \"btn\"}\r\n      >\r\n        {this.props.btn}\r\n      </p>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Button;\r\n","import React, { Component } from \"react\";\r\nimport Button from \"./button\";\r\n\r\nclass Body extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      memory: \"\",\r\n      primaryCalculus: \"1\",\r\n      currentNum: \"\",\r\n      operation: false,\r\n      calculus: \"\",\r\n      operationStatus: \"primary\",\r\n    };\r\n  }\r\n\r\n  print = (n) => {\r\n    this.setState({\r\n      currentNum: this.state.currentNum + n,\r\n      calculus: this.state.calculus + n,\r\n      operation: false,\r\n    });\r\n\r\n    if (this.state.operationStatus === \"secondary\") {\r\n      this.setState({\r\n        primaryCalculus: \"1\",\r\n      });\r\n    }\r\n\r\n    this.sendData(this.state.currentNum + n, this.state.calculus + n);\r\n  };\r\n\r\n  operations = (sign) => {\r\n    //   If operation is set to true cut last sign and put current pressed\r\n    if (this.state.operation) {\r\n      this.setState({\r\n        calculus: this.state.calculus.slice(0, -2) + ` ${sign} `,\r\n      });\r\n\r\n      //   When operation is true and sign * or / then send data to display: current memory number and preview whole calculus\r\n      if (sign === \"*\" || sign === \"/\") {\r\n        if (this.state.operationStatus === \"secondary\") {\r\n          this.sendData(\r\n            this.state.memory,\r\n            this.state.calculus.slice(0, -2) + ` ${sign} `\r\n          );\r\n        } else {\r\n          this.sendData(\r\n            eval(this.state.primaryCalculus),\r\n            this.state.calculus.slice(0, -2) + ` ${sign} `\r\n          );\r\n        }\r\n      }\r\n\r\n      //   When operation is true and sign NOT * or / then send data to display: calculate whole calculus and preview whole calculus\r\n      else {\r\n        this.sendData(\r\n          eval(this.state.calculus.slice(0, -2)),\r\n          this.state.calculus.slice(0, -2) + ` ${sign} `\r\n        );\r\n      }\r\n    }\r\n\r\n    // If operation is false then set memory to current number, reset current number, add this sign to calculus and active operation\r\n    else {\r\n      this.setState({\r\n        memory: this.state.currentNum,\r\n        currentNum: \"\",\r\n        calculus: this.state.calculus + ` ${sign} `,\r\n        operation: true,\r\n      });\r\n\r\n      //   If operation is false and sign * OR / send data to display: current number and preview whole calculus\r\n      if (sign === \"*\" || sign === \"/\") {\r\n        this.setState({\r\n          primaryCalculus:\r\n            this.state.primaryCalculus + `${sign}` + this.state.currentNum,\r\n          operationStatus: \"primary\",\r\n        });\r\n        this.sendData(\r\n          eval(this.state.primaryCalculus + `${sign}` + this.state.currentNum),\r\n          this.state.calculus + ` ${sign} `\r\n        );\r\n      }\r\n\r\n      //   If operation is false and sign NOT * OR / send data to display: calculate whole calculus and preview whole calculus\r\n      else {\r\n        this.setState({\r\n          operationStatus: \"secondary\",\r\n        });\r\n        this.sendData(\r\n          eval(this.state.calculus),\r\n          this.state.calculus + ` ${sign} `\r\n        );\r\n      }\r\n    }\r\n  };\r\n\r\n  add = () => {\r\n    this.operations(\"+\");\r\n  };\r\n\r\n  substraction = () => {\r\n    this.operations(\"-\");\r\n  };\r\n\r\n  multiplication = () => {\r\n    this.operations(\"*\");\r\n  };\r\n\r\n  division = () => {\r\n    this.operations(\"/\");\r\n  };\r\n\r\n  sendData = (val1, val2) => {\r\n    this.props.getData(val1, val2);\r\n  };\r\n\r\n  reset = () => {\r\n    this.setState({\r\n      currentNum: \"\",\r\n      operation: false,\r\n      calculus: \"\",\r\n      primaryCalculus: \"1\",\r\n    });\r\n    this.sendData(\"\", \"\");\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"calc-body\">\r\n        <Button func={this.reset} btn=\"AC\" />\r\n        <Button btn=\"+/-\" />\r\n        <Button btn=\"%\" />\r\n        <Button func={this.division} btn=\"/\" />\r\n        <Button func={() => this.print(7)} btn=\"7\" />\r\n        <Button func={() => this.print(8)} btn=\"8\" />\r\n        <Button func={() => this.print(9)} btn=\"9\" />\r\n        <Button func={this.multiplication} btn=\"*\" />\r\n        <Button func={() => this.print(4)} btn=\"4\" />\r\n        <Button func={() => this.print(5)} btn=\"5\" />\r\n        <Button func={() => this.print(6)} btn=\"6\" />\r\n        <Button func={this.substraction} btn=\"-\" />\r\n        <Button func={() => this.print(1)} btn=\"1\" />\r\n        <Button func={() => this.print(2)} btn=\"2\" />\r\n        <Button func={() => this.print(3)} btn=\"3\" />\r\n        <Button func={this.add} btn=\"+\" />\r\n        <Button func={() => this.print(0)} span=\"2\" btn=\"0\" />\r\n        <Button btn=\".\" />\r\n        <Button btn=\"=\" />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Body;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Screen extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"screen\">\r\n        <p className=\"preview\">{this.props.preview}</p>\r\n        <p>{this.props.display === \"\" ? 0 : this.props.display}</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Screen;\r\n","import React, { Component } from \"react\";\r\nimport Body from \"./components/body\";\r\nimport Screen from \"./components/screen\";\r\n\r\nclass App extends Component {\r\n  state = {\r\n    preview: \"\",\r\n    display: \"\",\r\n  };\r\n\r\n  getData = (data, calculus) => {\r\n    this.setState({\r\n      preview: calculus,\r\n      display: data,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"app\">\r\n        <Screen display={this.state.display} preview={this.state.preview} />\r\n        <Body getData={this.getData} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./style.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}